# Generated by Django 3.1.3 on 2021-07-04 00:24

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uid', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=45, unique=True)),
                ('lastLogin', models.DateTimeField(default=None, null=True)),
                ('isBlocked', models.BooleanField(default=False)),
                ('isDeleted', models.BooleanField(default=False)),
                ('accessLevel', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('genre', models.CharField(max_length=45, unique=True)),
            ],
            options={
                'db_table': 'Genre',
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('mid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(max_length=200)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'Movie',
            },
        ),
        migrations.CreateModel(
            name='NewMovieRequest',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('movieName', models.CharField(max_length=150, unique=True)),
                ('description', models.CharField(default=None, max_length=500)),
                ('reason', models.CharField(default=None, max_length=200)),
                ('status', models.IntegerField(blank=True, default=0, null=True)),
                ('uid', models.ForeignKey(db_column='uid', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'NewMovieRequest',
            },
        ),
        migrations.CreateModel(
            name='MovieRating',
            fields=[
                ('rid', models.AutoField(primary_key=True, serialize=False)),
                ('stars', models.IntegerField()),
                ('isdeleted', models.IntegerField()),
                ('mid', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='popcorn.movie')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'MovieRating',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('cid', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=200)),
                ('created', models.DateTimeField()),
                ('lastupdated', models.DateTimeField()),
                ('isdeleted', models.IntegerField(default=0)),
                ('mid', models.ForeignKey(db_column='mid', on_delete=django.db.models.deletion.DO_NOTHING, to='popcorn.movie')),
                ('uid', models.ForeignKey(db_column='uid', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Comment',
            },
        ),
        migrations.CreateModel(
            name='MovieGenre',
            fields=[
                ('mid', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='popcorn.movie')),
                ('gid', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='popcorn.genre')),
            ],
            options={
                'db_table': 'MovieGenre',
            },
        ),
    ]
